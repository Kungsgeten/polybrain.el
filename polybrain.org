* polybrain.el
:properties:
:header-args: :tangle yes
:end:
** package prologue
#+begin_src emacs-lisp
  ;;; polybrain.el --- Polymode support for Org-brain -*- lexical-binding: t; -*-
  ;; Copyright (C) 2020 Dustin Lacewell

  ;; Author: Dustin Lacewell <dlacewell@gmail.com>
  ;; Version: 0.1.0
  ;; Package-Requires: ((emacs "26") (polymode "0") (org-brain "0") (org "0"))
  ;; Keywords: polymode, org, org-brain
  ;; URL: http://github.com/dustinlacewell/polybrain.el

  ;;; Commentary:

  ;; This package lets you edit your org-brain entries from org-brain-visualize

  ;;; Code:
  (require 'cl-lib)
  (require 'polymode)
  (require 'org-brain)
#+end_src

** settings
*** defgroup
#+begin_src emacs-lisp
  ;;;###autoload
  (defgroup polybrain nil
    "Configuration options for polybrain."
    :group 'org)
#+end_src

*** polybrain-file
#+begin_src emacs-lisp
  ;; ;;;###autoload
  ;; (defcustom polybrain-file (expand-file-name "~/org/bookmarks.org")
  ;;   "Define polybrain file to store your bookmarks in."
  ;;   :group 'polybrain
  ;;   :type 'string)
#+end_src

** boilerplate

*** polybrain-visualize-setup
#+begin_src emacs-lisp
  (defun polybrain-visualize-setup ()
    (unless poly-brain-mode (poly-brain-mode))
    (setq-local buffer-read-only nil))

  (add-hook 'org-brain-visualize-text-hook 'polybrain-visualize-setup)
#+end_src

*** polybrain--get-point-min-max
#+begin_src emacs-lisp
  (defun polybrain--get-point-min-max ()
    (save-excursion
      (beginning-of-buffer)
      (search-forward "--- Entry" nil t)
      (beginning-of-line)
      (previous-line)
      (let ((max (point)))
        (next-line)
        (next-line)
        (list (point) max))))
#+end_src

*** polybrain-save
#+begin_src emacs-lisp
  (defun polybrain-save ()
    (interactive)
    (save-excursion
      (beginning-of-buffer)
      (search-forward "--- Entry")
      (end-of-line)
      (forward-char)
      (call-interactively 'set-mark-command)
      (end-of-buffer)
      (call-interactively 'kill-ring-save)
      (deactivate-mark t)
      (find-file (org-brain-entry-path org-brain--vis-entry))
      (beginning-of-buffer)
      (goto-char
       (or (save-excursion
             (when (re-search-forward org-brain-keyword-regex nil t)
               (end-of-line)
               (forward-char)
               (point)))
           (point-min)))
      (yank)
      (call-interactively 'set-mark-command)
      (end-of-buffer)
      (call-interactively 'kill-region)
      (save-buffer)
      (switch-to-buffer (other-buffer (current-buffer) 1))))
#+end_src

*** polybrain-switch
#+begin_src emacs-lisp
  (lexical-let ((last-brain-point nil)
                (last-org-point nil))

    (defun polybrain-switch ()
      (interactive)
      (seq-let (org-min brain-max) (polybrain--get-point-min-max)
        (let ((p (point)))
          (if (search-forward "--- Entry" nil t)
              (progn
                (setq last-brain-point p)
                (if last-org-point
                    (goto-char (max org-min last-org-point))
                  (end-of-line) (forward-char)))
            (setq last-org-point p)
            (if last-brain-point
                (goto-char (floor (min brain-max last-brain-point)))
              (beginning-of-buffer)))))))

#+end_src

** polymode definitions
*** poly-brain-hostmode
#+begin_src emacs-lisp
  (define-hostmode poly-brain-hostmode
    :mode 'org-brain-visualize-mode)
#+end_src

*** poly-brain-org-innermode
#+begin_src emacs-lisp
  (define-innermode poly-brain-org-innermode
    :mode 'org-mode
    :head-matcher "--- Entry.*"
    :tail-matcher "\'"
    :head-mode 'host
    :tail-mode 'host)
#+end_src

*** poly-brain-mode
#+begin_src emacs-lisp
  (define-polymode poly-brain-mode
    :hostmode 'poly-brain-hostmode
    :innermodes '(poly-brain-org-innermode))
#+end_src

** package epilogue
#+begin_src emacs-lisp
  (provide 'polybrain)

  ;;; polybrain.el ends here
#+end_src

